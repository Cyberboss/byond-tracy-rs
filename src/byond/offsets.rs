use crate::byond::BuildNumber;

pub static OFFSETS: &'static [Offsets] = platform_offsets();

static OFFSETS_WINDOWS: [Offsets; 103] = [
    Offsets::new(
        1543, 0x0035FC58, 0x0035FC5C, 0x0035FC68, 0x0035FC6C, 0x0035FC78, 0x0035FC7C, 0x00180024,
        0x001003B0, 0x001C7D20, 0x00187C80, 0x00050B06,
    ),
    Offsets::new(
        1544, 0x00360C58, 0x00360C5C, 0x00360C68, 0x00360C6C, 0x00360C78, 0x00360C7C, 0x00180024,
        0x00100A10, 0x001C8420, 0x00188220, 0x00050B06,
    ),
    Offsets::new(
        1545, 0x00360C60, 0x00360C64, 0x00360C70, 0x00360C74, 0x00360C80, 0x00360C84, 0x00180024,
        0x00100980, 0x001C8400, 0x00188190, 0x00050B06,
    ),
    Offsets::new(
        1546, 0x00360C60, 0x00360C64, 0x00360C70, 0x00360C74, 0x00360C80, 0x00360C84, 0x00180024,
        0x00100830, 0x001C8280, 0x001880C0, 0x00050606,
    ),
    Offsets::new(
        1547, 0x00362C68, 0x00362C6C, 0x00362C78, 0x00362C7C, 0x00362C88, 0x00362C8C, 0x00180024,
        0x00101210, 0x001C9320, 0x001891F0, 0x00050606,
    ),
    Offsets::new(
        1548, 0x00362C48, 0x00362C4C, 0x00362C58, 0x00362C5C, 0x00362C68, 0x00362C6C, 0x00180024,
        0x00101640, 0x001C96D0, 0x00188E80, 0x00050606,
    ),
    Offsets::new(
        1549, 0x00368DD4, 0x00368DD8, 0x00368DEC, 0x00368DF0, 0x00368E00, 0x00368E04, 0x00180024,
        0x001023B0, 0x001CB0A0, 0x0018AD80, 0x00050606,
    ),
    Offsets::new(
        1550, 0x0036903C, 0x00369040, 0x0036904C, 0x00369050, 0x0036905C, 0x00369060, 0x00180024,
        0x00102710, 0x001CB710, 0x0018B0B0, 0x00050606,
    ),
    Offsets::new(
        1551, 0x00369034, 0x00369038, 0x00369044, 0x00369048, 0x00369054, 0x00369058, 0x00180024,
        0x00102C30, 0x001CB830, 0x0018B120, 0x00050606,
    ),
    Offsets::new(
        1552, 0x0036A054, 0x0036A058, 0x0036A064, 0x0036A068, 0x0036A074, 0x0036A078, 0x00180024,
        0x00102DE0, 0x001CBDE0, 0x0018B6B0, 0x00050606,
    ),
    Offsets::new(
        1553, 0x0036E234, 0x0036E238, 0x0036E244, 0x0036E248, 0x0036E254, 0x0036E258, 0x00180024,
        0x00104FF0, 0x001CF780, 0x0018DE50, 0x00050606,
    ),
    Offsets::new(
        1554, 0x0036DFF8, 0x0036DFFC, 0x0036E008, 0x0036E00C, 0x0036E018, 0x0036E01C, 0x00180024,
        0x00104ED0, 0x001CF650, 0x0018E000, 0x00050606,
    ),
    Offsets::new(
        1555, 0x0036E0B0, 0x0036E0B4, 0x0036E0C0, 0x0036E0C4, 0x0036E0D0, 0x0036E0D4, 0x00180024,
        0x001064F0, 0x001CFD80, 0x0018EEB0, 0x00050606,
    ),
    Offsets::new(
        1556, 0x0036E0AC, 0x0036E0B0, 0x0036E0BC, 0x0036E0C0, 0x0036E0CC, 0x0036E0D0, 0x00180024,
        0x00106560, 0x001CFD80, 0x0018EEE0, 0x00050606,
    ),
    Offsets::new(
        1557, 0x0036E0C0, 0x0036E0C4, 0x0036E0D0, 0x0036E0D4, 0x0036E0E0, 0x0036E0E4, 0x00180024,
        0x001063B0, 0x001CFB60, 0x0018EC70, 0x00050606,
    ),
    Offsets::new(
        1558, 0x0036F4F4, 0x0036F4F8, 0x0036F504, 0x0036F508, 0x0036F514, 0x0036F518, 0x00180024,
        0x00106DE0, 0x001D1160, 0x0018FD80, 0x00050606,
    ),
    Offsets::new(
        1559, 0x0036F4F4, 0x0036F4F8, 0x0036F504, 0x0036F508, 0x0036F514, 0x0036F518, 0x00180024,
        0x00106DE0, 0x001D1160, 0x0018FD80, 0x00050606,
    ),
    Offsets::new(
        1560, 0x0036F4F4, 0x0036F4F8, 0x0036F504, 0x0036F508, 0x0036F514, 0x0036F518, 0x00180024,
        0x00106AF0, 0x001D1120, 0x0018FA80, 0x00050606,
    ),
    Offsets::new(
        1561, 0x0036F4F4, 0x0036F4F8, 0x0036F504, 0x0036F508, 0x0036F514, 0x0036F518, 0x00180024,
        0x00106AF0, 0x001D1120, 0x0018FA80, 0x00050606,
    ),
    Offsets::new(
        1562, 0x0036F538, 0x0036F53C, 0x0036F548, 0x0036F54C, 0x0036F558, 0x0036F55C, 0x00180024,
        0x00106960, 0x001D0F00, 0x0018F780, 0x00050606,
    ),
    Offsets::new(
        1563, 0x0036F538, 0x0036F53C, 0x0036F548, 0x0036F54C, 0x0036F558, 0x0036F55C, 0x00180024,
        0x001066A0, 0x001D1160, 0x0018F660, 0x00050606,
    ),
    Offsets::new(
        1564, 0x0036F538, 0x0036F53C, 0x0036F548, 0x0036F54C, 0x0036F558, 0x0036F55C, 0x00180024,
        0x00106310, 0x001D0F20, 0x0018F1E0, 0x00050606,
    ),
    Offsets::new(
        1565, 0x00371538, 0x0037153C, 0x00371548, 0x0037154C, 0x00371558, 0x0037155C, 0x00180024,
        0x00106960, 0x001D15A0, 0x0018FCC0, 0x00050606,
    ),
    Offsets::new(
        1566, 0x00371538, 0x0037153C, 0x00371548, 0x0037154C, 0x00371558, 0x0037155C, 0x00180024,
        0x00106160, 0x001D0A70, 0x0018EF80, 0x00050606,
    ),
    Offsets::new(
        1567, 0x00370548, 0x0037054C, 0x00370560, 0x00370564, 0x00370570, 0x00370574, 0x00180024,
        0x00106220, 0x001D0B00, 0x0018F470, 0x00050606,
    ),
    Offsets::new(
        1568, 0x00370548, 0x0037054C, 0x00370560, 0x00370564, 0x00370570, 0x00370574, 0x00180024,
        0x00106220, 0x001D0B30, 0x0018F470, 0x00050606,
    ),
    Offsets::new(
        1569, 0x00370548, 0x0037054C, 0x00370560, 0x00370564, 0x00370570, 0x00370574, 0x00180024,
        0x00106220, 0x001D0B40, 0x0018F500, 0x00050606,
    ),
    Offsets::new(
        1570, 0x00371548, 0x0037154C, 0x00371558, 0x0037155C, 0x00371568, 0x0037156C, 0x00180024,
        0x00106560, 0x001D0BF0, 0x0018F8F0, 0x00050606,
    ),
    Offsets::new(
        1571, 0x00371548, 0x0037154C, 0x00371558, 0x0037155C, 0x00371568, 0x0037156C, 0x00180024,
        0x001061D0, 0x001D0A70, 0x0018F500, 0x00050606,
    ),
    Offsets::new(
        1572, 0x00371540, 0x00371544, 0x00371550, 0x00371554, 0x00371560, 0x00371564, 0x00180024,
        0x001066A0, 0x001D0F60, 0x0018FCC0, 0x00050606,
    ),
    Offsets::new(
        1573, 0x00371608, 0x0037160C, 0x00371618, 0x0037161C, 0x00371628, 0x0037162C, 0x00180024,
        0x00106BD0, 0x001D13C0, 0x0018FC40, 0x00050606,
    ),
    Offsets::new(
        1574, 0x00371550, 0x00371554, 0x00371560, 0x00371564, 0x00371570, 0x00371574, 0x00180024,
        0x001065A0, 0x001D10E0, 0x0018FDC0, 0x00050606,
    ),
    Offsets::new(
        1575, 0x00371550, 0x00371554, 0x00371560, 0x00371564, 0x00371570, 0x00371574, 0x00180024,
        0x001065A0, 0x001D10E0, 0x0018FDC0, 0x00050606,
    ),
    Offsets::new(
        1576, 0x003745BC, 0x003745C0, 0x003745CC, 0x003745D0, 0x003745DC, 0x003745E0, 0x00180024,
        0x001087B0, 0x001D30A0, 0x00191C60, 0x00050606,
    ),
    Offsets::new(
        1577, 0x003745BC, 0x003745C0, 0x003745CC, 0x003745D0, 0x003745DC, 0x003745E0, 0x00180024,
        0x00107FC0, 0x001D2C90, 0x00191A60, 0x00050606,
    ),
    Offsets::new(
        1578, 0x003745BC, 0x003745C0, 0x003745CC, 0x003745D0, 0x003745DC, 0x003745E0, 0x00180024,
        0x001083B0, 0x001D2E90, 0x00191910, 0x00050606,
    ),
    Offsets::new(
        1579, 0x003745C8, 0x003745CC, 0x003745D8, 0x003745DC, 0x003745E8, 0x003745EC, 0x00180024,
        0x00108C20, 0x001D3940, 0x001925C0, 0x00050606,
    ),
    Offsets::new(
        1580, 0x003745C8, 0x003745CC, 0x003745D8, 0x003745DC, 0x003745E8, 0x003745EC, 0x00180024,
        0x00108BD0, 0x001D38B0, 0x00192520, 0x00050606,
    ),
    Offsets::new(
        1581, 0x003745C8, 0x003745CC, 0x003745D8, 0x003745DC, 0x003745E8, 0x003745EC, 0x00180024,
        0x001086A0, 0x001D3780, 0x001923A0, 0x00050606,
    ),
    Offsets::new(
        1582, 0x003745C8, 0x003745CC, 0x003745D8, 0x003745DC, 0x003745E8, 0x003745EC, 0x00180024,
        0x001087B0, 0x001D3A40, 0x00191FF0, 0x00050606,
    ),
    Offsets::new(
        1583, 0x003755C8, 0x003755CC, 0x003755D8, 0x003755DC, 0x003755E8, 0x003755EC, 0x00180024,
        0x00108240, 0x001D33F0, 0x001919E0, 0x00050606,
    ),
    Offsets::new(
        1584, 0x003764B4, 0x003764B8, 0x003764C4, 0x003764C8, 0x003764D4, 0x003764D8, 0x00180024,
        0x00108460, 0x001D3A40, 0x001922C0, 0x00050606,
    ),
    Offsets::new(
        1585, 0x003774AC, 0x003774B0, 0x003774BC, 0x003774C0, 0x003774CC, 0x003774D0, 0x00180024,
        0x001094D0, 0x001D49E0, 0x00192D80, 0x00050606,
    ),
    Offsets::new(
        1586, 0x00378524, 0x00378528, 0x00378534, 0x00378538, 0x00378544, 0x00378548, 0x00180024,
        0x00109AA0, 0x001D5160, 0x00193370, 0x00050606,
    ),
    Offsets::new(
        1587, 0x00378524, 0x00378528, 0x00378534, 0x00378538, 0x00378544, 0x00378548, 0x00180024,
        0x00109AA0, 0x001D5160, 0x00193370, 0x00050606,
    ),
    Offsets::new(
        1588, 0x00378524, 0x00378528, 0x00378534, 0x00378538, 0x00378544, 0x00378548, 0x00180024,
        0x00109B10, 0x001D5220, 0x00193840, 0x00050606,
    ),
    Offsets::new(
        1589, 0x00378524, 0x00378528, 0x00378534, 0x00378538, 0x00378544, 0x00378548, 0x00180024,
        0x00109AA0, 0x001D5190, 0x00193710, 0x00050606,
    ),
    Offsets::new(
        1590, 0x00396974, 0x00396978, 0x00396984, 0x00396988, 0x00396994, 0x00396998, 0x00180024,
        0x00118180, 0x001EA800, 0x001A6A80, 0x00050606,
    ),
    Offsets::new(
        1591, 0x00396974, 0x00396978, 0x00396984, 0x00396988, 0x00396994, 0x00396998, 0x00180024,
        0x001175E0, 0x001E9F00, 0x001A5F00, 0x00050606,
    ),
    Offsets::new(
        1592, 0x00396974, 0x00396978, 0x00396984, 0x00396988, 0x00396994, 0x00396998, 0x00180024,
        0x00117890, 0x001EA900, 0x001A6380, 0x00050606,
    ),
    Offsets::new(
        1593, 0x00396974, 0x00396978, 0x00396984, 0x00396988, 0x00396994, 0x00396998, 0x00180024,
        0x00118090, 0x001EAB30, 0x001A6920, 0x00050606,
    ),
    Offsets::new(
        1594, 0x00397B6C, 0x00397B70, 0x00397B7C, 0x00397B80, 0x00397B8C, 0x00397B90, 0x00180024,
        0x00118590, 0x001EBBB0, 0x001A8140, 0x00050606,
    ),
    Offsets::new(
        1595, 0x0039AB58, 0x0039AB5C, 0x0039AB68, 0x0039AB6C, 0x0039AB78, 0x0039AB7C, 0x00180024,
        0x0011A810, 0x001EED90, 0x001AB310, 0x00050606,
    ),
    Offsets::new(
        1596, 0x0039AB58, 0x0039AB5C, 0x0039AB68, 0x0039AB6C, 0x0039AB78, 0x0039AB7C, 0x00180024,
        0x0011A090, 0x001EE950, 0x001AAC20, 0x00050606,
    ),
    Offsets::new(
        1597, 0x0039CB74, 0x0039CB78, 0x0039CB84, 0x0039CB88, 0x0039CB94, 0x0039CB98, 0x00180024,
        0x0011B5A0, 0x001EF8A0, 0x001AC2A0, 0x00050606,
    ),
    Offsets::new(
        1598, 0x0039EBC8, 0x0039EBCC, 0x0039EBD8, 0x0039EBDC, 0x0039EBE8, 0x0039EBEC, 0x00180024,
        0x0011BF40, 0x001F0B40, 0x001ACFF0, 0x00050606,
    ),
    Offsets::new(
        1599, 0x0039EBC8, 0x0039EBCC, 0x0039EBD8, 0x0039EBDC, 0x0039EBE8, 0x0039EBEC, 0x00180024,
        0x0011B640, 0x001F0910, 0x001AC9B0, 0x00050606,
    ),
    Offsets::new(
        1600, 0x0039EBC8, 0x0039EBCC, 0x0039EBD8, 0x0039EBDC, 0x0039EBE8, 0x0039EBEC, 0x00180024,
        0x0011BE70, 0x001F08B0, 0x001AD170, 0x00050606,
    ),
    Offsets::new(
        1601, 0x0039FC0C, 0x0039FC10, 0x0039FC1C, 0x0039FC20, 0x0039FC2C, 0x0039FC30, 0x00180024,
        0x0011BC70, 0x001F0DC0, 0x001ACAA0, 0x00050606,
    ),
    Offsets::new(
        1602, 0x003A2C50, 0x003A2C58, 0x003A2C68, 0x003A2C6C, 0x003A2C78, 0x003A2C7C, 0x00180024,
        0x0011EB80, 0x001F3350, 0x001AF9F0, 0x00050606,
    ),
    Offsets::new(
        1603, 0x003A3DE0, 0x003A3DE8, 0x003A3DF8, 0x003A3DFC, 0x003A3E08, 0x003A3E0C, 0x00180024,
        0x0011EC00, 0x001F3890, 0x001AFB90, 0x00050606,
    ),
    Offsets::new(
        1604, 0x003A1D88, 0x003A1D8C, 0x003A1D98, 0x003A1D9C, 0x003A1DA8, 0x003A1DAC, 0x00180024,
        0x0011E570, 0x001F3A50, 0x001AF6D0, 0x00050606,
    ),
    Offsets::new(
        1605, 0x003A2D80, 0x003A2D84, 0x003A2D90, 0x003A2D94, 0x003A2DA0, 0x003A2DA4, 0x00180024,
        0x0011E250, 0x001F3A20, 0x001AFAC0, 0x00050606,
    ),
    Offsets::new(
        1606, 0x003A2D80, 0x003A2D84, 0x003A2D90, 0x003A2D94, 0x003A2DA0, 0x003A2DA4, 0x00180024,
        0x0011E230, 0x001F39C0, 0x001AFA50, 0x00050606,
    ),
    Offsets::new(
        1607, 0x003A3DE0, 0x003A3DE4, 0x003A3DF0, 0x003A3DF4, 0x003A3E00, 0x003A3E04, 0x00180024,
        0x0011EF00, 0x001F48B0, 0x001B0560, 0x00050606,
    ),
    Offsets::new(
        1608, 0x003A3DE0, 0x003A3DE4, 0x003A3DF0, 0x003A3DF4, 0x003A3E00, 0x003A3E04, 0x00180024,
        0x0011ED70, 0x001F4B30, 0x001B0680, 0x00050606,
    ),
    Offsets::new(
        1609, 0x003AB1E8, 0x003AB1EC, 0x003AB1F8, 0x003AB1FC, 0x003AB208, 0x003AB20C, 0x00180024,
        0x0011FE90, 0x001F5900, 0x001B14D0, 0x00050606,
    ),
    Offsets::new(
        1610, 0x003AA23C, 0x003AA240, 0x003AA24C, 0x003AA250, 0x003AA25C, 0x003AA260, 0x00180024,
        0x0011F670, 0x001F5C30, 0x001B1450, 0x00050606,
    ),
    Offsets::new(
        1611, 0x003AD3A8, 0x003AD3AC, 0x003AD3B8, 0x003AD3BC, 0x003AD3C8, 0x003AD3CC, 0x00180024,
        0x0011F220, 0x001F5950, 0x001B0D10, 0x00050606,
    ),
    Offsets::new(
        1612, 0x003AD3A8, 0x003AD3AC, 0x003AD3B8, 0x003AD3BC, 0x003AD3C8, 0x003AD3CC, 0x00180024,
        0x0011F220, 0x001F58F0, 0x001B0C90, 0x00050606,
    ),
    Offsets::new(
        1613, 0x003AD3A8, 0x003AD3AC, 0x003AD3B8, 0x003AD3BC, 0x003AD3C8, 0x003AD3CC, 0x00180024,
        0x0011F3C0, 0x001F59E0, 0x001B0F20, 0x00050606,
    ),
    Offsets::new(
        1614, 0x003AC3A8, 0x003AC3AC, 0x003AC3B8, 0x003AC3BC, 0x003AC3C8, 0x003AC3CC, 0x00180024,
        0x0011EBE0, 0x001F50E0, 0x001B0A50, 0x00050606,
    ),
    Offsets::new(
        1615, 0x004073E0, 0x004073E4, 0x004073F0, 0x004073F4, 0x00407400, 0x00407404, 0x00180024,
        0x00130F20, 0x0020B580, 0x001C3AD0, 0x00050606,
    ),
    Offsets::new(
        1616, 0x004073E0, 0x004073E4, 0x004073F0, 0x004073F4, 0x00407400, 0x00407404, 0x00180024,
        0x00131210, 0x0020B9E0, 0x001C3E20, 0x00050606,
    ),
    Offsets::new(
        1617, 0x004074B0, 0x004074B4, 0x004074C0, 0x004074C4, 0x004074D0, 0x004074D4, 0x00180028,
        0x001312D0, 0x0020BAB0, 0x001C3EB0, 0x00050606,
    ),
    Offsets::new(
        1618, 0x004074B0, 0x004074B4, 0x004074C0, 0x004074C4, 0x004074D0, 0x004074D4, 0x00180028,
        0x00131350, 0x0020BBA0, 0x001C3F40, 0x00050606,
    ),
    Offsets::new(
        1619, 0x004074B0, 0x004074B4, 0x004074C0, 0x004074C4, 0x004074D0, 0x004074D4, 0x00180028,
        0x00131350, 0x0020BBA0, 0x001C3F40, 0x00050606,
    ),
    Offsets::new(
        1620, 0x0040758C, 0x00407590, 0x0040759C, 0x004075A0, 0x004075AC, 0x004075B0, 0x00180028,
        0x001313C0, 0x0020BC00, 0x001C3F60, 0x00050606,
    ),
    Offsets::new(
        1621, 0x0040758C, 0x00407590, 0x0040759C, 0x004075A0, 0x004075AC, 0x004075B0, 0x00180028,
        0x001313B0, 0x0020BC70, 0x001C3FC0, 0x00050606,
    ),
    Offsets::new(
        1622, 0x0040755C, 0x00407560, 0x0040756C, 0x00407570, 0x0040757C, 0x00407580, 0x00180028,
        0x001312D0, 0x0020BB90, 0x001C3EB0, 0x00050606,
    ),
    Offsets::new(
        1623, 0x0040755C, 0x00407560, 0x0040756C, 0x00407570, 0x0040757C, 0x00407580, 0x00180028,
        0x001312D0, 0x0020BB90, 0x001C3EB0, 0x00050606,
    ),
    Offsets::new(
        1624, 0x00407564, 0x00407568, 0x00407574, 0x00407578, 0x00407584, 0x00407588, 0x001C002C,
        0x00130D40, 0x0020B810, 0x001C3940, 0x00050606,
    ),
    Offsets::new(
        1625, 0x00407564, 0x00407568, 0x00407574, 0x00407578, 0x00407584, 0x00407588, 0x001C002C,
        0x00130D40, 0x0020B810, 0x001C3940, 0x00050606,
    ),
    Offsets::new(
        1626, 0x00407564, 0x00407568, 0x00407574, 0x00407578, 0x00407584, 0x00407588, 0x001C002C,
        0x00130CF0, 0x0020B780, 0x001C38C0, 0x00050606,
    ),
    Offsets::new(
        1627, 0x0040556C, 0x00405570, 0x0040557C, 0x00405580, 0x0040558C, 0x00405590, 0x001C002C,
        0x0012F570, 0x0020A030, 0x001C2140, 0x00050606,
    ),
    Offsets::new(
        1630, 0x0040556C, 0x00405570, 0x0040557C, 0x00405580, 0x0040558C, 0x00405590, 0x001C002C,
        0x0012F710, 0x0020A2E0, 0x001C2430, 0x00050606,
    ),
    Offsets::new(
        1631, 0x0040756C, 0x00407570, 0x0040757C, 0x00407580, 0x0040758C, 0x00407590, 0x001C002C,
        0x0012FB30, 0x0020A830, 0x001C2970, 0x00050606,
    ),
    Offsets::new(
        1632, 0x0040756C, 0x00407570, 0x0040757C, 0x00407580, 0x0040758C, 0x00407590, 0x001C002C,
        0x0012FC00, 0x0020A8D0, 0x001C29D0, 0x00050606,
    ),
    Offsets::new(
        1633, 0x00407574, 0x00407578, 0x00407584, 0x00407588, 0x00407594, 0x00407598, 0x001C002C,
        0x0012FCF0, 0x0020A9D0, 0x001C2AE0, 0x00050606,
    ),
    Offsets::new(
        1634, 0x00408574, 0x00408578, 0x00408584, 0x00408588, 0x00408594, 0x00408598, 0x001C002C,
        0x0012FCF0, 0x0020A9D0, 0x001C2AE0, 0x00050606,
    ),
    Offsets::new(
        1635, 0x00408574, 0x00408578, 0x00408584, 0x00408588, 0x00408594, 0x00408598, 0x001C002C,
        0x0012FE00, 0x0020AAD0, 0x001C2BD0, 0x00050606,
    ),
    Offsets::new(
        1636, 0x0040860C, 0x00408610, 0x0040861C, 0x00408620, 0x0040862C, 0x00408630, 0x001C002C,
        0x0012FFE0, 0x0020AEE0, 0x001C2F60, 0x00050606,
    ),
    Offsets::new(
        1637, 0x0040860C, 0x00408610, 0x0040861C, 0x00408620, 0x0040862C, 0x00408630, 0x001C002C,
        0x00130290, 0x0020B290, 0x001C3270, 0x00050606,
    ),
    Offsets::new(
        1638, 0x0040960C, 0x00409610, 0x0040961C, 0x00409620, 0x0040962C, 0x00409630, 0x001C002C,
        0x00130AE0, 0x0020BB10, 0x001C3AE0, 0x00050606,
    ),
    Offsets::new(
        1639, 0x0040960C, 0x00409610, 0x0040961C, 0x00409620, 0x0040962C, 0x00409630, 0x001C002C,
        0x00130AE0, 0x0020BB10, 0x001C3AE0, 0x00050606,
    ),
    Offsets::new(
        1640, 0x0040960C, 0x00409610, 0x0040961C, 0x00409620, 0x0040962C, 0x00409630, 0x001C002C,
        0x00130AA0, 0x0020BB40, 0x001C3AE0, 0x00050606,
    ),
    Offsets::new(
        1641, 0x00409614, 0x00409618, 0x00409624, 0x00409628, 0x00409634, 0x00409638, 0x001C002C,
        0x00130B20, 0x0020BA10, 0x001C3890, 0x00050606,
    ),
    Offsets::new(
        1642, 0x00409614, 0x00409618, 0x00409624, 0x00409628, 0x00409634, 0x00409638, 0x001C002C,
        0x00130B20, 0x0020BAE0, 0x001C3940, 0x00050606,
    ),
    Offsets::new(
        1643, 0x0040961C, 0x00409620, 0x0040962C, 0x00409630, 0x0040963C, 0x00409640, 0x001C002C,
        0x00130B20, 0x0020BAD0, 0x001C38E0, 0x00050606,
    ),
    Offsets::new(
        1644, 0x004096BC, 0x004096C0, 0x004096CC, 0x004096D0, 0x004096DC, 0x004096E0, 0x001C002C,
        0x00130D60, 0x0020BD20, 0x001C3B90, 0x00050606,
    ),
    Offsets::new(
        1645, 0x0040A6C4, 0x0040A6C8, 0x0040A6D4, 0x0040A6D8, 0x0040A6E4, 0x0040A6E8, 0x001C002C,
        0x00131240, 0x0020C260, 0x001C4060, 0x00050606,
    ),
    Offsets::new(
        1646, 0x0040A6C4, 0x0040A6C8, 0x0040A6D4, 0x0040A6D8, 0x0040A6E4, 0x0040A6E8, 0x001C002C,
        0x00131310, 0x0020C300, 0x001C4160, 0x00050606,
    ),
    Offsets::new(
        1647, 0x0040A6C4, 0x0040A6C8, 0x0040A6D4, 0x0040A6D8, 0x0040A6E4, 0x0040A6E8, 0x001C002C,
        0x00131260, 0x0020c430, 0x001C4250, 0x00050606,
    ),
];

static OFFSETS_LINUX: [Offsets; 101] = [
    /*                                strings     strings_len miscs       miscs_len   procdefs   procdefs_len procdef     exec_proc   server_tick send_maps   prologue */
    Offsets::new(
        1543, 0x0063F9B8, 0x0063F9BC, 0x0063F9D0, 0x0063F9D4, 0x0063FA0C, 0x0063FA10, 0x00180024,
        0x002E31E0, 0x002B7710, 0x002B28D0, 0x00050505,
    ),
    Offsets::new(
        1544, 0x00640BB8, 0x00640BBC, 0x00640BD0, 0x00640BD4, 0x00640C0C, 0x00640C10, 0x00180024,
        0x002E3A60, 0x002B7F90, 0x002B3150, 0x00050505,
    ),
    Offsets::new(
        1545, 0x006409D8, 0x006409DC, 0x006409F0, 0x006409F4, 0x00640A2C, 0x00640A30, 0x00180024,
        0x002E3D00, 0x002B8230, 0x002B33F0, 0x00050505,
    ),
    Offsets::new(
        1546, 0x006409D8, 0x006409DC, 0x006409F0, 0x006409F4, 0x00640A2C, 0x00640A30, 0x00180024,
        0x002E3ED0, 0x002B83F0, 0x002B3570, 0x00050505,
    ),
    Offsets::new(
        1547, 0x00642A38, 0x00642A3C, 0x00642A50, 0x00642A54, 0x00642A8C, 0x00642A90, 0x00180024,
        0x002E4D30, 0x002B8F40, 0x002B4320, 0x00050505,
    ),
    Offsets::new(
        1548, 0x00643A38, 0x00643A3C, 0x00643A50, 0x00643A54, 0x00643A8C, 0x00643A90, 0x00180024,
        0x002E5CB0, 0x002B9ED0, 0x002B52B0, 0x00050505,
    ),
    Offsets::new(
        1549, 0x006459D8, 0x006459DC, 0x006459F0, 0x006459F4, 0x00645A2C, 0x00645A30, 0x00180024,
        0x002E6C30, 0x002BADD0, 0x002B5F10, 0x00050505,
    ),
    Offsets::new(
        1550, 0x006469D8, 0x006469DC, 0x006469F0, 0x006469F4, 0x00646A2C, 0x00646A30, 0x00180024,
        0x002E7B80, 0x002BB910, 0x002B6A50, 0x00050505,
    ),
    Offsets::new(
        1551, 0x006469D8, 0x006469DC, 0x006469F0, 0x006469F4, 0x00646A2C, 0x00646A30, 0x00180024,
        0x002E77C0, 0x002BB520, 0x002B6660, 0x00050505,
    ),
    Offsets::new(
        1552, 0x006469D8, 0x006469DC, 0x006469F0, 0x006469F4, 0x00646A2C, 0x00646A30, 0x00180024,
        0x002E7D20, 0x002BBA70, 0x002B6BB0, 0x00050505,
    ),
    Offsets::new(
        1553, 0x00651B18, 0x00651B1C, 0x00651B30, 0x00651B34, 0x00651B6C, 0x00651B70, 0x00180024,
        0x002F1490, 0x002C51E0, 0x002BCE30, 0x00050505,
    ),
    Offsets::new(
        1554, 0x00651B18, 0x00651B1C, 0x00651B30, 0x00651B34, 0x00651B6C, 0x00651B70, 0x00180024,
        0x002F1D10, 0x002C5280, 0x002BCED0, 0x00050505,
    ),
    Offsets::new(
        1555, 0x00653B28, 0x00653B2C, 0x00653B40, 0x00653B44, 0x00653B8C, 0x00653B90, 0x00180024,
        0x002F2EA0, 0x002C5F90, 0x002BE1A0, 0x00050505,
    ),
    Offsets::new(
        1556, 0x00653B28, 0x00653B2C, 0x00653B40, 0x00653B44, 0x00653B8C, 0x00653B90, 0x00180024,
        0x002F2BE0, 0x002C5CD0, 0x002BDEE0, 0x00050505,
    ),
    Offsets::new(
        1557, 0x00653B28, 0x00653B2C, 0x00653B40, 0x00653B44, 0x00653B8C, 0x00653B90, 0x00180024,
        0x002F2A40, 0x002C5B40, 0x002BDD50, 0x00050505,
    ),
    Offsets::new(
        1558, 0x00656B48, 0x00656B4C, 0x00656B60, 0x00656B64, 0x00656BAC, 0x00656BB0, 0x00180024,
        0x002F5020, 0x002C8070, 0x002C0280, 0x00050505,
    ),
    Offsets::new(
        1559, 0x00656B48, 0x00656B4C, 0x00656B60, 0x00656B64, 0x00656BAC, 0x00656BB0, 0x00180024,
        0x002F5020, 0x002C8070, 0x002C0280, 0x00050505,
    ),
    Offsets::new(
        1560, 0x00656B48, 0x00656B4C, 0x00656B60, 0x00656B64, 0x00656BAC, 0x00656BB0, 0x00180024,
        0x002F5040, 0x002C8090, 0x002C02A0, 0x00050505,
    ),
    Offsets::new(
        1562, 0x0065AB48, 0x0065AB4C, 0x0065AB60, 0x0065AB64, 0x0065ABAC, 0x0065ABB0, 0x00180024,
        0x002F89B0, 0x002CBA20, 0x002C3C30, 0x00050505,
    ),
    Offsets::new(
        1563, 0x0065ABC8, 0x0065ABCC, 0x0065ABE0, 0x0065ABE4, 0x0065AC2C, 0x0065AC30, 0x00180024,
        0x002F87E0, 0x002CB850, 0x002C3A60, 0x00050505,
    ),
    Offsets::new(
        1564, 0x00659B48, 0x00659B4C, 0x00659B60, 0x00659B64, 0x00659BAC, 0x00659BB0, 0x00180024,
        0x002F8680, 0x002CB6F0, 0x002C3900, 0x00050505,
    ),
    Offsets::new(
        1565, 0x0065FB48, 0x0065FB4C, 0x0065FB60, 0x0065FB64, 0x0065FBAC, 0x0065FBB0, 0x00180024,
        0x002F9990, 0x002CCA00, 0x002C4C10, 0x00050505,
    ),
    Offsets::new(
        1566, 0x0065EB48, 0x0065EB4C, 0x0065EB60, 0x0065EB64, 0x0065EBAC, 0x0065EBB0, 0x00180024,
        0x002F8830, 0x002CB8A0, 0x002C3AB0, 0x00050505,
    ),
    Offsets::new(
        1567, 0x0065CB48, 0x0065CB4C, 0x0065CB60, 0x0065CB64, 0x0065CBAC, 0x0065CBB0, 0x00180024,
        0x002F74D0, 0x002CA480, 0x002C2690, 0x00050505,
    ),
    Offsets::new(
        1568, 0x0065CB48, 0x0065CB4C, 0x0065CB60, 0x0065CB64, 0x0065CBAC, 0x0065CBB0, 0x00180024,
        0x002F74D0, 0x002CA480, 0x002C2690, 0x00050505,
    ),
    Offsets::new(
        1569, 0x0065CB48, 0x0065CB4C, 0x0065CB60, 0x0065CB64, 0x0065CBAC, 0x0065CBB0, 0x00180024,
        0x002F74C0, 0x002CA470, 0x002C2680, 0x00050505,
    ),
    Offsets::new(
        1570, 0x0065CB48, 0x0065CB4C, 0x0065CB60, 0x0065CB64, 0x0065CBAC, 0x0065CBB0, 0x00180024,
        0x002F78E0, 0x002CA870, 0x002C2A90, 0x00050505,
    ),
    Offsets::new(
        1571, 0x0065CB48, 0x0065CB4C, 0x0065CB60, 0x0065CB64, 0x0065CBAC, 0x0065CBB0, 0x00180024,
        0x002F7900, 0x002CA890, 0x002C2AB0, 0x00050505,
    ),
    Offsets::new(
        1572, 0x0065DB48, 0x0065DB4C, 0x0065DB60, 0x0065DB64, 0x0065DBAC, 0x0065DBB0, 0x00180024,
        0x002F8110, 0x002CB0A0, 0x002C32C0, 0x00050505,
    ),
    Offsets::new(
        1573, 0x0065DC28, 0x0065DC2C, 0x0065DC40, 0x0065DC44, 0x0065DC8C, 0x0065DC90, 0x00180024,
        0x002F7EE0, 0x002CAE70, 0x002C3090, 0x00050505,
    ),
    Offsets::new(
        1574, 0x0065DB68, 0x0065DB6C, 0x0065DB80, 0x0065DB84, 0x0065DBCC, 0x0065DBD0, 0x00180024,
        0x002F8280, 0x002CB210, 0x002C3430, 0x00050505,
    ),
    Offsets::new(
        1575, 0x0065DB68, 0x0065DB6C, 0x0065DB80, 0x0065DB84, 0x0065DBCC, 0x0065DBD0, 0x00180024,
        0x002F8280, 0x002CB210, 0x002C3430, 0x00050505,
    ),
    Offsets::new(
        1576, 0x00664BC8, 0x00664BCC, 0x00664BE0, 0x00664BE4, 0x00664C2C, 0x00664C30, 0x00180024,
        0x002FCFC0, 0x002CFF50, 0x002C8170, 0x00050505,
    ),
    Offsets::new(
        1577, 0x00664BC8, 0x00664BCC, 0x00664BE0, 0x00664BE4, 0x00664C2C, 0x00664C30, 0x00180024,
        0x002FCFD0, 0x002CFF60, 0x002C8180, 0x00050505,
    ),
    Offsets::new(
        1578, 0x00664D08, 0x00664D0C, 0x00664D20, 0x00664D24, 0x00664D6C, 0x00664D70, 0x00180024,
        0x002FC5D0, 0x002CF550, 0x002C7770, 0x00050505,
    ),
    Offsets::new(
        1579, 0x00664BCC, 0x00664BD0, 0x00664BE4, 0x00664BE8, 0x00664C2C, 0x00664C30, 0x00180024,
        0x002FC740, 0x002CF590, 0x002C77B0, 0x00050505,
    ),
    Offsets::new(
        1580, 0x00664BCC, 0x00664BD0, 0x00664BE4, 0x00664BE8, 0x00664C2C, 0x00664C30, 0x00180024,
        0x002FC760, 0x002CF5A0, 0x002C77C0, 0x00050505,
    ),
    Offsets::new(
        1581, 0x00664BCC, 0x00664BD0, 0x00664BE4, 0x00664BE8, 0x00664C2C, 0x00664C30, 0x00180024,
        0x002FC740, 0x002CF580, 0x002C77A0, 0x00050505,
    ),
    Offsets::new(
        1582, 0x00666C2C, 0x00666C30, 0x00666C44, 0x00666C48, 0x00666C8C, 0x00666C90, 0x00180024,
        0x002FCEF0, 0x002CFBE0, 0x002C7E00, 0x00050505,
    ),
    Offsets::new(
        1583, 0x00666BCC, 0x00666BD0, 0x00666BE4, 0x00666BE8, 0x00666C2C, 0x00666C30, 0x00180024,
        0x002FCEF0, 0x002CFBE0, 0x002C7E00, 0x00050505,
    ),
    Offsets::new(
        1584, 0x00668BCC, 0x00668BD0, 0x00668BE4, 0x00668BE8, 0x00668C2C, 0x00668C30, 0x00180024,
        0x002FD510, 0x002D0200, 0x002C85D0, 0x00050505,
    ),
    Offsets::new(
        1585, 0x0066BBEC, 0x0066BBF0, 0x0066BC04, 0x0066BC08, 0x0066BC4C, 0x0066BC50, 0x00180024,
        0x00300350, 0x002D2E90, 0x002CB2B0, 0x00050505,
    ),
    Offsets::new(
        1586, 0x0066FC0C, 0x0066FC10, 0x0066FC24, 0x0066FC28, 0x0066FC6C, 0x0066FC70, 0x00180024,
        0x00303C40, 0x002D6770, 0x002CE3D0, 0x00050505,
    ),
    Offsets::new(
        1587, 0x0066FC0C, 0x0066FC10, 0x0066FC24, 0x0066FC28, 0x0066FC6C, 0x0066FC70, 0x00180024,
        0x00303CF0, 0x002D6820, 0x002CE480, 0x00050505,
    ),
    Offsets::new(
        1588, 0x0066FC0C, 0x0066FC10, 0x0066FC24, 0x0066FC28, 0x0066FC6C, 0x0066FC70, 0x00180024,
        0x00303CC0, 0x002D67F0, 0x002CE450, 0x00050505,
    ),
    Offsets::new(
        1589, 0x00671C0C, 0x00671C10, 0x00671C24, 0x00671C28, 0x00671C6C, 0x00671C70, 0x00180024,
        0x00305550, 0x002D80A0, 0x002CFD50, 0x00050505,
    ),
    Offsets::new(
        1590, 0x006B15E8, 0x006B15EC, 0x006B1600, 0x006B1604, 0x006B164C, 0x006B1650, 0x00180024,
        0x00313220, 0x002FFBA0, 0x002F5DA0, 0x00050505,
    ),
    Offsets::new(
        1591, 0x006B17C8, 0x006B17CC, 0x006B17E0, 0x006B17E4, 0x006B182C, 0x006B1830, 0x00180024,
        0x00313440, 0x002FFDC0, 0x002F5DC0, 0x00050505,
    ),
    Offsets::new(
        1592, 0x006B19C8, 0x006B19CC, 0x006B19E0, 0x006B19E4, 0x006B1A2C, 0x006B1A30, 0x00180024,
        0x003135F0, 0x002FFF70, 0x002F5F70, 0x00050505,
    ),
    Offsets::new(
        1593, 0x006B1C68, 0x006B1C6C, 0x006B1C80, 0x006B1C84, 0x006B1CCC, 0x006B1CD0, 0x00180024,
        0x00313820, 0x003001A0, 0x002F61A0, 0x00050505,
    ),
    Offsets::new(
        1594, 0x006B7C68, 0x006B7C6C, 0x006B7C80, 0x006B7C84, 0x006B7CCC, 0x006B7CD0, 0x00180024,
        0x003172C0, 0x00303B80, 0x002F9C40, 0x00050505,
    ),
    Offsets::new(
        1595, 0x006BA7A8, 0x006BA7AC, 0x006BA7C0, 0x006BA7C4, 0x006BA80C, 0x006BA810, 0x00180024,
        0x003163B0, 0x00303400, 0x002F94C0, 0x00050505,
    ),
    Offsets::new(
        1596, 0x006BB348, 0x006BB34C, 0x006BB360, 0x006BB364, 0x006BB3AC, 0x006BB3B0, 0x00180024,
        0x00316D60, 0x00303F80, 0x002FA040, 0x00050505,
    ),
    Offsets::new(
        1597, 0x006BC068, 0x006BC06C, 0x006BC080, 0x006BC084, 0x006BC0CC, 0x006BC0D0, 0x00180024,
        0x003188A0, 0x00305AC0, 0x002FBB80, 0x00050505,
    ),
    Offsets::new(
        1598, 0x006C4288, 0x006C428C, 0x006C42A0, 0x006C42A4, 0x006C42EC, 0x006C42F0, 0x00180024,
        0x0031B540, 0x003077D0, 0x002FD810, 0x00050505,
    ),
    Offsets::new(
        1599, 0x006C3AE8, 0x006C3AEC, 0x006C3B00, 0x006C3B04, 0x006C3B4C, 0x006C3B50, 0x00180024,
        0x0031B0A0, 0x00307330, 0x002FD370, 0x00050505,
    ),
    Offsets::new(
        1600, 0x006C38A8, 0x006C38AC, 0x006C38C0, 0x006C38C4, 0x006C390C, 0x006C3910, 0x00180024,
        0x0031AE30, 0x003070C0, 0x002FD100, 0x00050505,
    ),
    Offsets::new(
        1601, 0x006C5B48, 0x006C5B4C, 0x006C5B60, 0x006C5B64, 0x006C5BAC, 0x006C5BB0, 0x00180024,
        0x0031B790, 0x00307A80, 0x002FD9A0, 0x00050505,
    ),
    Offsets::new(
        1602, 0x006CD928, 0x006CD92C, 0x006CD940, 0x006CD944, 0x006CD98C, 0x006CD990, 0x00180024,
        0x00322000, 0x0030E300, 0x003041E0, 0x00050505,
    ),
    Offsets::new(
        1603, 0x006CF7A8, 0x006CF7AC, 0x006CF7C0, 0x006CF7C4, 0x006CF80C, 0x006CF810, 0x00180024,
        0x00321F50, 0x0030E260, 0x003042A0, 0x00050505,
    ),
    Offsets::new(
        1604, 0x006CD4E8, 0x006CD4EC, 0x006CD500, 0x006CD504, 0x006CD54C, 0x006CD550, 0x00180024,
        0x00321CC0, 0x0030DF60, 0x00304550, 0x00050505,
    ),
    Offsets::new(
        1605, 0x006CD868, 0x006CD86C, 0x006CD880, 0x006CD884, 0x006CD8CC, 0x006CD8D0, 0x00180024,
        0x00321F10, 0x0030E130, 0x00306750, 0x00050505,
    ),
    Offsets::new(
        1606, 0x006CD8C8, 0x006CD8CC, 0x006CD8E0, 0x006CD8E4, 0x006CD92C, 0x006CD930, 0x00180024,
        0x00321F30, 0x0030E150, 0x00306770, 0x00050505,
    ),
    Offsets::new(
        1607, 0x006CA928, 0x006CA92C, 0x006CA940, 0x006CA944, 0x006CA98C, 0x006CA990, 0x00180024,
        0x0031F170, 0x0030B370, 0x00303970, 0x00050505,
    ),
    Offsets::new(
        1608, 0x006CA628, 0x006CA62C, 0x006CA640, 0x006CA644, 0x006CA68C, 0x006CA690, 0x00180024,
        0x0031EF70, 0x0030B170, 0x00303770, 0x00050505,
    ),
    Offsets::new(
        1609, 0x006DFB88, 0x006DFB8C, 0x006DFBA0, 0x006DFBA4, 0x006DFBEC, 0x006DFBF0, 0x00180024,
        0x00326A20, 0x00312B20, 0x0030A810, 0x00050505,
    ),
    Offsets::new(
        1610, 0x006DE428, 0x006DE42C, 0x006DE440, 0x006DE444, 0x006DE48C, 0x006DE490, 0x00180024,
        0x00325850, 0x00311790, 0x003093D0, 0x00050505,
    ),
    Offsets::new(
        1611, 0x006D69E8, 0x006D69EC, 0x006D6A00, 0x006D6A04, 0x006D6A4C, 0x006D6A50, 0x00180024,
        0x00322AA0, 0x0030FA20, 0x00307660, 0x00050505,
    ),
    Offsets::new(
        1613, 0x006D6C48, 0x006D6C4C, 0x006D6C60, 0x006D6C64, 0x006D6CAC, 0x006D6CB0, 0x00180024,
        0x00322CD0, 0x0030FC50, 0x00307890, 0x00050505,
    ),
    Offsets::new(
        1614, 0x006D62C8, 0x006D62CC, 0x006D62E0, 0x006D62E4, 0x006D632C, 0x006D6330, 0x00180024,
        0x00323550, 0x003104B0, 0x003080F0, 0x00050505,
    ),
    Offsets::new(
        1615, 0x006D83E8, 0x006D83EC, 0x006D8400, 0x006D8404, 0x006D844C, 0x006D8450, 0x00180024,
        0x00324FF0, 0x00311F50, 0x00309B90, 0x00050505,
    ),
    Offsets::new(
        1616, 0x006D8608, 0x006D860C, 0x006D8620, 0x006D8624, 0x006D866C, 0x006D8670, 0x00180024,
        0x00325190, 0x003120F0, 0x00309D30, 0x00050505,
    ),
    Offsets::new(
        1617, 0x006DA978, 0x006DA97C, 0x006DA990, 0x006DA994, 0x006DA9CC, 0x006DA9D0, 0x00180028,
        0x00326510, 0x00313430, 0x0030B070, 0x00050505,
    ),
    Offsets::new(
        1618, 0x006DA6D8, 0x006DA6DC, 0x006DA6F0, 0x006DA6F4, 0x006DA72C, 0x006DA730, 0x00180028,
        0x00326250, 0x00313170, 0x0030ADB0, 0x00050505,
    ),
    Offsets::new(
        1619, 0x006DA698, 0x006DA69C, 0x006DA6B0, 0x006DA6B4, 0x006DA6EC, 0x006DA6F0, 0x00180028,
        0x00326240, 0x00313160, 0x0030ADA0, 0x00050505,
    ),
    Offsets::new(
        1620, 0x006D61D8, 0x006D61DC, 0x006D61F0, 0x006D61F4, 0x006D622C, 0x006D6230, 0x00180028,
        0x00324BE0, 0x00311AE0, 0x00309720, 0x00050505,
    ),
    Offsets::new(
        1621, 0x006D8698, 0x006D869C, 0x006D86B0, 0x006D86B4, 0x006D86EC, 0x006D86F0, 0x00180028,
        0x003252F0, 0x003121F0, 0x00309E30, 0x00050505,
    ),
    Offsets::new(
        1622, 0x006D71B8, 0x006D71BC, 0x006D71D0, 0x006D71D4, 0x006D720C, 0x006D7210, 0x00180028,
        0x00324BC0, 0x00311AC0, 0x00309700, 0x00050505,
    ),
    Offsets::new(
        1623, 0x006D71B8, 0x006D71BC, 0x006D71D0, 0x006D71D4, 0x006D720C, 0x006D7210, 0x00180028,
        0x00324BD0, 0x00311AD0, 0x00309710, 0x00050505,
    ),
    Offsets::new(
        1624, 0x006D6198, 0x006D619C, 0x006D61B0, 0x006D61B4, 0x006D61EC, 0x006D61F0, 0x001C002C,
        0x00323E00, 0x00310C60, 0x003088A0, 0x00050505,
    ),
    Offsets::new(
        1625, 0x006D6198, 0x006D619C, 0x006D61B0, 0x006D61B4, 0x006D61EC, 0x006D61F0, 0x001C002C,
        0x00323E20, 0x00310C80, 0x003088C0, 0x00050505,
    ),
    Offsets::new(
        1626, 0x006D6198, 0x006D619C, 0x006D61B0, 0x006D61B4, 0x006D61EC, 0x006D61F0, 0x001C002C,
        0x00323BC0, 0x00310A20, 0x00308660, 0x00050505,
    ),
    Offsets::new(
        1627, 0x006D3198, 0x006D319C, 0x006D31B0, 0x006D31B4, 0x006D31EC, 0x006D31F0, 0x001C002C,
        0x00320D10, 0x0030DB70, 0x003057B0, 0x00050505,
    ),
    Offsets::new(
        1630, 0x006D47B8, 0x006D47BC, 0x006D47D0, 0x006D47D4, 0x006D480C, 0x006D4810, 0x001C002C,
        0x003213E0, 0x0030E240, 0x00305E80, 0x00050505,
    ),
    Offsets::new(
        1631, 0x006D84D8, 0x006D84DC, 0x006D84F0, 0x006D84F4, 0x006D852C, 0x006D8530, 0x001C002C,
        0x00322120, 0x0030EF80, 0x00306BC0, 0x00050505,
    ),
    Offsets::new(
        1632, 0x006D85F8, 0x006D85FC, 0x006D8610, 0x006D8614, 0x006D864C, 0x006D8650, 0x001C002C,
        0x00322140, 0x0030EFA0, 0x00306BE0, 0x00050505,
    ),
    Offsets::new(
        1633, 0x006D8778, 0x006D877C, 0x006D8790, 0x006D8794, 0x006D87CC, 0x006D87D0, 0x001C002C,
        0x003220D0, 0x0030EF30, 0x00306B70, 0x00050505,
    ),
    Offsets::new(
        1634, 0x006D8798, 0x006D879C, 0x006D87B0, 0x006D87B4, 0x006D87EC, 0x006D87F0, 0x001C002C,
        0x00322150, 0x0030EFB0, 0x00306BF0, 0x00050505,
    ),
    Offsets::new(
        1635, 0x006D8798, 0x006D879C, 0x006D87B0, 0x006D87B4, 0x006D87EC, 0x006D87F0, 0x001C002C,
        0x003220E0, 0x0030EF40, 0x00306B80, 0x00050505,
    ),
    Offsets::new(
        1636, 0x006D9198, 0x006D919C, 0x006D91B0, 0x006D91B4, 0x006D91EC, 0x006D91F0, 0x001C002C,
        0x00322D40, 0x0030FBA0, 0x003065A0, 0x00050505,
    ),
    Offsets::new(
        1637, 0x006DA338, 0x006DA33C, 0x006DA350, 0x006DA354, 0x006DA38C, 0x006DA390, 0x001C002C,
        0x003228B0, 0x0030FEF0, 0x003068F0, 0x00050505,
    ),
    Offsets::new(
        1638, 0x006DAC58, 0x006DAC5C, 0x006DAC70, 0x006DAC74, 0x006DACAC, 0x006DACB0, 0x001C002C,
        0x00322E00, 0x00310440, 0x00306E40, 0x00050505,
    ),
    Offsets::new(
        1639, 0x006DA198, 0x006DA19C, 0x006DA1B0, 0x006DA1B4, 0x006DA1EC, 0x006DA1F0, 0x001C002C,
        0x00322F10, 0x00310550, 0x00306F50, 0x00050505,
    ),
    Offsets::new(
        1640, 0x006DB498, 0x006DB49C, 0x006DB4B0, 0x006DB4B4, 0x006DB4EC, 0x006DB4F0, 0x001C002C,
        0x00323160, 0x003107B0, 0x003071B0, 0x00050505,
    ),
    Offsets::new(
        1641, 0x006DB678, 0x006DB67C, 0x006DB690, 0x006DB694, 0x006DB6CC, 0x006DB6D0, 0x001C002C,
        0x00322FD0, 0x00310590, 0x00306F90, 0x00050505,
    ),
    Offsets::new(
        1642, 0x006DB818, 0x006DB81C, 0x006DB830, 0x006DB834, 0x006DB86C, 0x006DB870, 0x001C002C,
        0x00323000, 0x003105C0, 0x00306FC0, 0x00050505,
    ),
    Offsets::new(
        1643, 0x006DB618, 0x006DB61C, 0x006DB630, 0x006DB634, 0x006DB66C, 0x006DB670, 0x001C002C,
        0x00322E10, 0x00310430, 0x00306E30, 0x00050505,
    ),
    Offsets::new(
        1644, 0x00786DF0, 0x00786DEC, 0x00786DD8, 0x00786DD4, 0x00786D80, 0x00786D7C, 0x001C002C,
        0x003486D0, 0x00334490, 0x00322C90, 0x00050505,
    ),
    Offsets::new(
        1645, 0x00788DF0, 0x00788DEC, 0x00788DD8, 0x00788DD4, 0x00788D80, 0x00788D7C, 0x001C002C,
        0x0034A240, 0x00336000, 0x00324800, 0x00050505,
    ),
    Offsets::new(
        1646, 0x00788DF0, 0x00788DEC, 0x00788DD8, 0x00788DD4, 0x00788D80, 0x00788D7C, 0x001C002C,
        0x0034A430, 0x003361F0, 0x003249F0, 0x00050505,
    ),
    Offsets::new(
        1647, 0x00787DF0, 0x00787DEC, 0x00787DD8, 0x00787DD4, 0x00787D98, 0x00787D94, 0x001C002C,
        0x00349680, 0x003353D0, 0x00323B20, 0x00050505,
    ),
];

pub struct Offsets {
    pub byond_build: BuildNumber,
    pub strings: usize,
    pub strings_len: usize,
    pub miscs: usize,
    pub miscs_len: usize,
    pub procdefs: usize,
    pub procdefs_len: usize,
    pub procdefs_descriptor: usize,
    pub exec_proc: usize,
    pub server_tick: usize,
    pub send_maps: usize,
    pub prologue: usize,
}

impl Offsets {
    const fn new(
        byond_build: BuildNumber,
        strings: usize,
        strings_len: usize,
        miscs: usize,
        miscs_len: usize,
        procdefs: usize,
        procdefs_len: usize,
        procdefs_descriptor: usize,
        exec_proc: usize,
        server_tick: usize,
        send_maps: usize,
        prologue: usize,
    ) -> Self {
        Self {
            byond_build,
            strings,
            strings_len,
            miscs,
            miscs_len,
            procdefs,
            procdefs_len,
            procdefs_descriptor,
            exec_proc,
            server_tick,
            send_maps,
            prologue,
        }
    }
}

const fn platform_offsets() -> &'static [Offsets] {
    #[cfg(target_os = "windows")]
    return &OFFSETS_WINDOWS;
    #[cfg(not(target_os = "windows"))]
    return &OFFSETS_LINUX;
}
